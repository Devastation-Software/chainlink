{"version":3,"sources":["../src/Cluster/Cluster.ts"],"names":[],"mappings":"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","file":"Cluster.js","sourcesContent":["import cluster, { Worker } from 'cluster';\nimport { ShardingManager } from '..';\nimport { IPCEvents } from '../Util/Constants';\nimport { IPCResult, IPCError } from '../Sharding/ShardClientUtil';\nimport { Util as DjsUtil } from 'discord.js';\nimport * as Util from '../Util/Util';\nimport { EventEmitter } from 'events';\n\nexport interface ClusterOptions {\n\tid: number;\n\tshards: number[];\n\tmanager: ShardingManager;\n}\n\nexport class Cluster extends EventEmitter {\n\tpublic ready = false;\n\tpublic id: number;\n\tpublic shards: number[];\n\tpublic worker?: Worker;\n\tpublic manager: ShardingManager;\n\n\tprivate readonly _exitListenerFunction: (...args: any[]) => void;\n\n\tpublic constructor(options: ClusterOptions) {\n\t\tsuper();\n\t\tthis.id = options.id;\n\t\tthis.shards = options.shards;\n\t\tthis.manager = options.manager;\n\t\tthis._exitListenerFunction = this._exitListener.bind(this);\n\n\t\tthis.once('ready', () => { this.ready = true; });\n\t}\n\n\tpublic async eval(script: string | Function) {\n\t\tscript = typeof script === 'function' ? `(${script})(this)` : script;\n\t\tconst { success, d } = await this.manager.ipc.server.sendTo(`Cluster ${this.id}`, { op: IPCEvents.EVAL, d: script }) as IPCResult;\n\t\tif (!success) throw DjsUtil.makeError(d as IPCError);\n\t\treturn d;\n\t}\n\n\tpublic async fetchClientValue(prop: string) {\n\t\tconst { success, d } = await this.manager.ipc.server.sendTo(`Cluster ${this.id}`, { op: IPCEvents.EVAL, d: `this.${prop}` }) as IPCResult;\n\t\tif (!success) throw DjsUtil.makeError(d as IPCError);\n\t\treturn d;\n\t}\n\n\tpublic kill() {\n\t\tif (this.worker) {\n\t\t\tthis.manager.emit('debug', `Killing Cluster ${this.id}`);\n\t\t\tthis.worker.removeListener('exit', this._exitListenerFunction);\n\t\t\tthis.worker.kill();\n\t\t}\n\t}\n\n\tpublic async respawn(delay = 500) {\n\t\tthis.kill();\n\t\tif (delay) await DjsUtil.delayFor(delay);\n\t\tawait this.spawn();\n\t}\n\n\tpublic send(data: unknown) {\n\t\treturn this.manager.ipc.node.sendTo(`Cluster ${this.id}`, data);\n\t}\n\n\tpublic async spawn() {\n\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\tthis.worker = cluster.fork({ CLUSTER_SHARDS: this.shards.join(','), CLUSTER_ID: this.id.toString(), CLUSTER_SHARD_COUNT: this.manager.shardCount.toString(), CLUSTER_CLUSTER_COUNT: this.manager.clusterCount.toString(), ...process.env });\n\n\t\tthis.worker.once('exit', this._exitListenerFunction);\n\n\t\tthis.manager.emit('debug', `Worker spawned with id ${this.worker.id}`);\n\n\t\tthis.manager.emit('spawn', this);\n\n\t\tawait this._waitReady(this.shards.length);\n\t\tawait Util.sleep(5000);\n\t}\n\n\tprivate _exitListener(code: number, signal: string) {\n\t\tthis.ready = false;\n\t\tthis.worker = undefined;\n\n\t\tthis.manager.emit('debug', `Worker exited with code ${code} and signal ${signal}${this.manager.respawn ? ', restarting...' : ''}`);\n\n\t\tif (this.manager.respawn) return this.respawn();\n\t}\n\n\tprivate _waitReady(shardCount: number) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.once('ready', resolve);\n\t\t\tsetTimeout(() => reject(new Error(`Cluster ${this.id} took too long to get ready`)), (this.manager.timeout * shardCount) * (this.manager.guildsPerShard / 1000));\n\t\t});\n\t}\n}\n"],"sourceRoot":"../../src"}
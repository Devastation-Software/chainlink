{"version":3,"sources":["../src/IPC/ClusterIPC.ts"],"names":[],"mappings":"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","file":"ClusterIPC.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { Client as VezaClient, NodeMessage, ClientSocket } from 'veza';\nimport { Client, Util } from 'discord.js';\nimport { IPCEvents } from '../Util/Constants';\nimport { IPCResult } from '..';\nimport { IPCError } from '../Sharding/ShardClientUtil';\n\nexport interface IPCRequest {\n\top: number;\n\td: string;\n}\n\nexport class ClusterIPC extends EventEmitter {\n\tpublic clientSocket?: ClientSocket;\n\tpublic client: Client | typeof Client;\n\tpublic node: VezaClient;\n\n\tpublic constructor(discordClient: Client | typeof Client, public id: number, public socket: string | number) {\n\t\tsuper();\n\t\tthis.client = discordClient;\n\t\tthis.node = new VezaClient(`Cluster ${this.id}`)\n\t\t\t.on('error', error => this.emit('error', error))\n\t\t\t.on('disconnect', client => this.emit('warn', `[IPC] Disconnected from ${client.name}`))\n\t\t\t.on('ready', client => this.emit('debug', `[IPC] Connected to: ${client.name}`))\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\t\t.on('message', this._message.bind(this));\n\t}\n\n\tpublic async broadcast(script: string | Function) {\n\t\tscript = typeof script === 'function' ? `(${script})(this)` : script;\n\t\tconst { success, d } = await this.server.send({ op: IPCEvents.BROADCAST, d: script }) as IPCResult;\n\t\tif (!success) throw Util.makeError(d as IPCError);\n\t\treturn d as unknown[];\n\t}\n\n\tpublic async masterEval(script: string | Function) {\n\t\tscript = typeof script === 'function' ? `(${script})(this)` : script;\n\t\tconst { success, d } = await this.server.send({ op: IPCEvents.MASTEREVAL, d: script }) as IPCResult;\n\t\tif (!success) throw Util.makeError(d as IPCError);\n\t\treturn d;\n\t}\n\n\tpublic async init() {\n\t\tthis.clientSocket = await this.node.connectTo(String(this.socket));\n\t}\n\n\tpublic get server() {\n\t\treturn this.clientSocket!;\n\t}\n\n\tprivate _eval(script: string): string {\n\t\treturn (this.client as any)._eval(script);\n\t}\n\n\tprivate async _message(message: NodeMessage) {\n\t\tconst { op, d } = message.data;\n\t\tif (op === IPCEvents.EVAL) {\n\t\t\ttry {\n\t\t\t\tmessage.reply({ success: true, d: await this._eval(d) });\n\t\t\t} catch (error) {\n\t\t\t\tif (!(error instanceof Error)) return;\n\t\t\t\tmessage.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } });\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../src"}
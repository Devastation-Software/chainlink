{"version":3,"sources":["../src/IPC/MasterIPC.ts"],"names":[],"mappings":"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","file":"MasterIPC.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { Server, NodeMessage } from 'veza';\nimport { Util } from 'discord.js';\nimport { ShardingManager } from '..';\nimport cluster from 'cluster';\nimport { IPCEvents, SharderEvents } from '../Util/Constants';\nimport { IPCRequest } from './ClusterIPC';\nexport class MasterIPC extends EventEmitter {\n\t[key: string]: any;\n\tpublic server: Server;\n\n\tpublic constructor(public manager: ShardingManager) {\n\t\tsuper();\n\t\tthis.server = new Server('Master')\n\t\t\t.on('connect', client => this.emit('debug', `Client Connected: ${client.name}`))\n\t\t\t.on('disconnect', client => this.emit('debug', `Client Disconnected: ${client.name}`))\n\t\t\t.on('error', error => this.emit('error', error))\n\t\t\t.on('message', this._incommingMessage.bind(this));\n\t\tif (cluster.isPrimary) void this.server.listen(manager.ipcSocket);\n\t}\n\n\tpublic async broadcast(code: string) {\n\t\tconst data = await this.server.broadcast({ op: IPCEvents.EVAL, d: code });\n\t\tlet errored = data.filter(res => !res.success);\n\t\tif (errored.length) {\n\t\t\terrored = errored.map(msg => msg.d);\n\t\t\tconst error = errored[0];\n\t\t\tthrow Util.makeError(error);\n\t\t}\n\t\treturn data.map(res => res.d) as unknown[];\n\t}\n\n\tprivate _incommingMessage(message: NodeMessage) {\n\t\tconst { op } = message.data as IPCRequest;\n\t\tthis[`_${IPCEvents[op].toLowerCase()}`](message);\n\t}\n\n\tprivate _message(message: NodeMessage) {\n\t\tconst { d } = message.data as IPCRequest;\n\t\tthis.manager.emit(SharderEvents.MESSAGE, d);\n\t}\n\n\tprivate async _broadcast(message: NodeMessage) {\n\t\tconst { d } = message.data;\n\t\ttry {\n\t\t\tconst data = await this.broadcast(d);\n\t\t\tmessage.reply({ success: true, d: data });\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) return;\n\t\t\tmessage.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } });\n\t\t}\n\t}\n\n\tprivate _ready(message: NodeMessage) {\n\t\tconst { d: id } = message.data;\n\t\tconst cluster = this.manager.clusters.get(id);\n\t\tcluster!.emit('ready');\n\t\tthis._debug(`Cluster ${id} became ready`);\n\t\tthis.manager.emit(SharderEvents.READY, cluster);\n\t}\n\n\tprivate _shardready(message: NodeMessage) {\n\t\tconst { d: { shardID } } = message.data;\n\t\tthis._debug(`Shard ${shardID} became ready`);\n\t\tthis.manager.emit(SharderEvents.SHARD_READY, shardID);\n\t}\n\n\tprivate _shardreconnect(message: NodeMessage) {\n\t\tconst { d: { shardID } } = message.data;\n\t\tthis._debug(`Shard ${shardID} tries to reconnect`);\n\t\tthis.manager.emit(SharderEvents.SHARD_RECONNECT, shardID);\n\t}\n\n\tprivate _shardresume(message: NodeMessage) {\n\t\tconst { d: { shardID, replayed } } = message.data;\n\t\tthis._debug(`Shard ${shardID} resumed connection`);\n\t\tthis.manager.emit(SharderEvents.SHARD_RESUME, replayed, shardID);\n\t}\n\n\tprivate _sharddisconnect(message: NodeMessage) {\n\t\tconst { d: { shardID, closeEvent } } = message.data;\n\t\tthis._debug(`Shard ${shardID} disconnected!`);\n\t\tthis.manager.emit(SharderEvents.SHARD_DISCONNECT, closeEvent, shardID);\n\t}\n\n\tprivate _restart(message: NodeMessage) {\n\t\tconst { d: clusterID } = message.data;\n\t\treturn this.manager.restart(clusterID)\n\t\t\t.then(() => message.reply({ success: true }))\n\t\t\t.catch(error => message.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } }));\n\t}\n\n\tprivate async _mastereval(message: NodeMessage) {\n\t\tconst { d } = message.data;\n\t\ttry {\n\t\t\tconst result = await this.manager.eval(d);\n\t\t\treturn message.reply({ success: true, d: result });\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) return;\n\t\t\treturn message.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } });\n\t\t}\n\t}\n\n\tprivate async _restartall() {\n\t\tawait this.manager.restartAll();\n\t}\n\n\tprivate async _fetchuser(message: NodeMessage) {\n\t\treturn this._fetch(message, 'const user = this.users.cache.get(\\'{id}\\'); user ? user.toJSON() : user;');\n\t}\n\n\tprivate async _fetchguild(message: NodeMessage) {\n\t\treturn this._fetch(message, 'const guild = this.guilds.cache.get(\\'{id}\\'); guild ? guild.toJSON() : guild;');\n\t}\n\n\tprivate _fetchchannel(message: NodeMessage) {\n\t\treturn this._fetch(message, 'const channel = this.channels.cache.get(\\'{id}\\'); channel ? channel.toJSON() : channel;');\n\t}\n\n\tprivate async _fetch(message: NodeMessage, code: string) {\n\t\tconst { d: id } = message.data;\n\t\tconst result = await this.broadcast(code.replace('{id}', id));\n\t\tconst realResult = result.filter(r => r);\n\t\tif (realResult.length) {\n\t\t\treturn message.reply({ success: true, d: realResult[0] });\n\t\t}\n\t\treturn message.reply({ success: false });\n\t}\n\n\tprivate _debug(message: string): void {\n\t\tthis.emit(SharderEvents.DEBUG, message);\n\t}\n}\n"],"sourceRoot":"../../src"}
{"version":3,"sources":["../src/Sharding/ShardingManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA4D;AAC5D,gDAA6C;AAC7C,gDAA6C;AAC7C,iDAAwD;AACxD,mCAAsC;AACtC,2BAA0B;AAC1B,sDAA8B;AAC9B,mDAAqC;AACrC,4DAA+B;AAoC/B,MAAa,eAAgB,SAAQ,qBAAY;IAiBhD,YAA0B,IAAY,EAAE,OAAuB;;QAC9D,KAAK,EAAE,CAAC;QADiB,SAAI,GAAJ,IAAI,CAAQ;QAhB/B,aAAQ,GAAG,IAAI,GAAG,EAAmB,CAAC;QAkB5C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAA,OAAO,CAAC,YAAY,mCAAI,IAAA,SAAI,GAAE,CAAC,MAAM,CAAC,CAAC;QAClE,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,MAAA,OAAO,CAAC,cAAc,mCAAI,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,GAAG,MAAA,OAAO,CAAC,aAAa,mCAAI,EAAE,OAAO,EAAE,oBAAO,CAAC,KAAK,CAAC,MAAM,EAA8B,CAAC;QAC5G,IAAI,CAAC,WAAW,GAAG,MAAA,OAAO,CAAC,WAAW,mCAAI,KAAK,CAAC;QAChD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC3E,IAAI,CAAC,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,mBAAM,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,MAAA,OAAO,CAAC,OAAO,mCAAI,IAAI,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,MAAA,OAAO,CAAC,SAAS,mCAAI,IAAI,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,MAAA,OAAO,CAAC,KAAK,mCAAI,IAAI,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAA,OAAO,CAAC,OAAO,mCAAI,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAa,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjE,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,KAAK;QACjB,IAAI,iBAAO,CAAC,SAAS,EAAE;YACtB,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;gBAC/B,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;gBACzC,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAEvE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBACxE,IAAI,CAAC,MAAM,CAAC,kCAAkC,IAAI,CAAC,UAAU,gBAAgB,IAAI,CAAC,cAAc,mBAAmB,CAAC,CAAC;aACrH;YAED,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,YAAY,YAAY,CAAC,CAAC;YAEpF,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE;gBACxC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;aACpC;YAED,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YACtD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,MAAM,MAAM,GAAc,EAAE,CAAC;YAE7B,IAAI,IAAI,CAAC,QAAQ;gBAAE,iBAAO,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAErE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;gBACvD,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,EAAG,CAAC;gBAEnC,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;gBAElE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAElC,IAAI;oBACH,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;iBACtB;gBAAC,WAAM;oBACP,IAAI,CAAC,MAAM,CAAC,WAAW,OAAO,CAAC,EAAE,kBAAkB,CAAC,CAAC;oBACrD,IAAI,CAAC,IAAI,CAAC,yBAAa,CAAC,KAAK,EAAE,IAAI,KAAK,CAAC,WAAW,OAAO,CAAC,EAAE,kBAAkB,CAAC,CAAC,CAAC;oBACnF,IAAI,IAAI,CAAC,KAAK,EAAE;wBACf,IAAI,CAAC,MAAM,CAAC,qBAAqB,OAAO,CAAC,EAAE,gBAAgB,CAAC,CAAC;wBAC7D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACrB;iBACD;aACD;YAED,IAAI,IAAI,CAAC,KAAK;gBAAE,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC/C;aAAM;YACN,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAC/B;IACF,CAAC;IAEM,KAAK,CAAC,UAAU;QACtB,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAExC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE;YAC7C,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;SACxB;IACF,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,SAAiB;QACrC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAEhE,IAAI,CAAC,MAAM,CAAC,sBAAsB,SAAS,EAAE,CAAC,CAAC;QAE/C,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAEM,iBAAiB,CAAC,IAAY;QACpC,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IAC3C,CAAC;IAEM,IAAI,CAAC,MAAc;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,IAAI;gBACH,mCAAmC;gBACnC,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC7B;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,CAAC,KAAK,CAAC,CAAC;aACd;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAQM,EAAE,CAAC,KAAU,EAAE,QAAkC;QACvD,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAClC,CAAC;IAQM,IAAI,CAAC,KAAU,EAAE,QAAkC;QACzD,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,QAAmB;QAC5C,MAAM,MAAM,GAAc,EAAE,CAAC;QAE7B,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC/B,IAAI;gBACH,IAAI,CAAC,MAAM,CAAC,sBAAsB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChD,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;aACxB;YAAC,WAAM;gBACP,IAAI,CAAC,MAAM,CAAC,WAAW,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC;gBAC1D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrB;SACD;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,kCAAkC,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAChC;IACF,CAAC;IAEO,KAAK,CAAC,qBAAqB;QAClC,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC3D,MAAM,GAAG,GAAG,MAAM,IAAA,oBAAK,EAAC,GAAG,gBAAI,CAAC,GAAG,KAAK,gBAAI,CAAC,OAAO,cAAc,EAAE;YACnE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,EAAE,aAAa,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE;SACvE,CAAC,CAAC;QACH,IAAI,GAAG,CAAC,EAAE;YAAE,OAAO,GAAG,CAAC,IAAI,EAA8B,CAAC;QAC1D,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IACvF,CAAC;IAEO,MAAM,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,CAAC,yBAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;CACD;AA1KD,0CA0KC","file":"ShardingManager.js","sourcesContent":["import { Client, ClientOptions, Intents } from 'discord.js';\nimport { MasterIPC } from '../IPC/MasterIPC';\nimport { Cluster } from '../Cluster/Cluster';\nimport { http, SharderEvents } from '../Util/Constants';\nimport { EventEmitter } from 'events';\nimport { cpus } from 'os';\nimport cluster from 'cluster';\nimport * as Util from '../Util/Util';\nimport fetch from 'node-fetch';\n\nexport interface SharderOptions {\n\ttoken?: string;\n\tshardCount?: number | 'auto';\n\tclusterCount?: number;\n\tname?: string;\n\tdevelopment?: boolean;\n\tclient?: typeof Client;\n\tclientOptions?: ClientOptions;\n\tguildsPerShard?: number;\n\trespawn?: boolean;\n\tipcSocket?: string | number;\n\ttimeout?: number;\n\tretry?: boolean;\n\tnodeArgs?: Array<string>;\n}\n\nexport interface SessionObject {\n\turl: string;\n\tshards: number;\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tsession_start_limit: {\n\t\ttotal: number;\n\t\tremaining: number;\n\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\treset_after: number;\n\t};\n}\n\nexport interface CloseEvent {\n\tcode: number;\n\treason: string;\n\twasClean: boolean;\n}\n\nexport class ShardingManager extends EventEmitter {\n\tpublic clusters = new Map<number, Cluster>();\n\tpublic clientOptions: ClientOptions;\n\tpublic shardCount: number | 'auto';\n\tpublic guildsPerShard: number;\n\tpublic client: typeof Client;\n\tpublic clusterCount: number;\n\tpublic ipcSocket: string | number;\n\tpublic respawn: boolean;\n\tpublic timeout: number;\n\tpublic retry: boolean;\n\tpublic nodeArgs?: Array<string>;\n\tpublic ipc: MasterIPC;\n\n\tprivate readonly development: boolean;\n\tprivate readonly token?: string;\n\n\tpublic constructor(public path: string, options: SharderOptions) {\n\t\tsuper();\n\t\tthis.clusterCount = Number(options.clusterCount ?? cpus().length);\n\t\tthis.guildsPerShard = Number(options.guildsPerShard ?? 1000);\n\t\tthis.clientOptions = options.clientOptions ?? { intents: Intents.FLAGS.GUILDS } as unknown as ClientOptions;\n\t\tthis.development = options.development ?? false;\n\t\tthis.shardCount = options.shardCount ? Number(options.shardCount) : 'auto';\n\t\tthis.client = options.client ?? Client;\n\t\tthis.respawn = options.respawn ?? true;\n\t\tthis.ipcSocket = options.ipcSocket ?? 9999;\n\t\tthis.retry = options.retry ?? true;\n\t\tthis.timeout = Number(options.timeout ?? 30000);\n\t\tthis.token = options.token;\n\t\tthis.nodeArgs = options.nodeArgs;\n\t\tthis.ipc = new MasterIPC(this);\n\n\t\tthis.ipc.on('debug', msg => this._debug(`[IPC] ${msg}`));\n\t\tthis.ipc.on('error', err => this.emit(SharderEvents.ERROR, err));\n\n\t\tif (!this.path) throw new Error('You need to supply a Path!');\n\t}\n\n\tpublic async spawn() {\n\t\tif (cluster.isPrimary) {\n\t\t\tif (this.shardCount === 'auto') {\n\t\t\t\tthis._debug('Fetching Session Endpoint');\n\t\t\t\tconst { shards: recommendShards } = await this._fetchSessionEndpoint();\n\n\t\t\t\tthis.shardCount = Util.calcShards(recommendShards, this.guildsPerShard);\n\t\t\t\tthis._debug(`Using recommend shard count of ${this.shardCount} shards with ${this.guildsPerShard} guilds per shard`);\n\t\t\t}\n\n\t\t\tthis._debug(`Starting ${this.shardCount} Shards in ${this.clusterCount} Clusters!`);\n\n\t\t\tif (this.shardCount < this.clusterCount) {\n\t\t\t\tthis.clusterCount = this.shardCount;\n\t\t\t}\n\n\t\t\tconst shardArray = [...Array(this.shardCount).keys()];\n\t\t\tconst shardTuple = Util.chunk(shardArray, this.clusterCount);\n\t\t\tconst failed: Cluster[] = [];\n\n\t\t\tif (this.nodeArgs) cluster.setupPrimary({ execArgv: this.nodeArgs });\n\n\t\t\tfor (let index = 0; index < this.clusterCount; index++) {\n\t\t\t\tconst shards = shardTuple.shift()!;\n\n\t\t\t\tconst cluster = new Cluster({ id: index, shards, manager: this });\n\n\t\t\t\tthis.clusters.set(index, cluster);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait cluster.spawn();\n\t\t\t\t} catch {\n\t\t\t\t\tthis._debug(`Cluster ${cluster.id} failed to start`);\n\t\t\t\t\tthis.emit(SharderEvents.ERROR, new Error(`Cluster ${cluster.id} failed to start`));\n\t\t\t\t\tif (this.retry) {\n\t\t\t\t\t\tthis._debug(`Requeuing Cluster ${cluster.id} to be spawned`);\n\t\t\t\t\t\tfailed.push(cluster);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.retry) await this.retryFailed(failed);\n\t\t} else {\n\t\t\treturn Util.startCluster(this);\n\t\t}\n\t}\n\n\tpublic async restartAll() {\n\t\tthis._debug('Restarting all Clusters!');\n\n\t\tfor (const cluster of this.clusters.values()) {\n\t\t\tawait cluster.respawn();\n\t\t}\n\t}\n\n\tpublic async restart(clusterID: number) {\n\t\tconst cluster = this.clusters.get(clusterID);\n\t\tif (!cluster) throw new Error('No Cluster with that ID found.');\n\n\t\tthis._debug(`Restarting Cluster ${clusterID}`);\n\n\t\tawait cluster.respawn();\n\t}\n\n\tpublic fetchClientValues(prop: string) {\n\t\treturn this.ipc.broadcast(`this.${prop}`);\n\t}\n\n\tpublic eval(script: string) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\t// tslint:disable-next-line:no-eval\n\t\t\t\treturn resolve(eval(script));\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic on(event: SharderEvents.DEBUG, listener: (message: string) => void): this;\n\tpublic on(event: SharderEvents.MESSAGE, listener: (message: unknown) => void): this;\n\tpublic on(event: SharderEvents.READY | SharderEvents.SPAWN, listener: (cluster: Cluster) => void): this;\n\tpublic on(event: SharderEvents.SHARD_READY | SharderEvents.SHARD_RECONNECT, listener: (shardID: number) => void): this;\n\tpublic on(event: SharderEvents.SHARD_RESUME, listener: (replayed: number, shardID: number) => void): this;\n\tpublic on(event: SharderEvents.SHARD_DISCONNECT, listener: (closeEvent: CloseEvent, shardID: number) => void): this;\n\tpublic on(event: any, listener: (...args: any[]) => void): this {\n\t\treturn super.on(event, listener);\n\t}\n\n\tpublic once(event: SharderEvents.DEBUG, listener: (message: string) => void): this;\n\tpublic once(event: SharderEvents.MESSAGE, listener: (message: unknown) => void): this;\n\tpublic once(event: SharderEvents.READY | SharderEvents.SPAWN, listener: (cluster: Cluster) => void): this;\n\tpublic once(event: SharderEvents.SHARD_READY | SharderEvents.SHARD_RECONNECT, listener: (shardID: number) => void): this;\n\tpublic once(event: SharderEvents.SHARD_RESUME, listener: (replayed: number, shardID: number) => void): this;\n\tpublic once(event: SharderEvents.SHARD_DISCONNECT, listener: (closeEvent: CloseEvent, shardID: number) => void): this;\n\tpublic once(event: any, listener: (...args: any[]) => void): this {\n\t\treturn super.once(event, listener);\n\t}\n\n\tprivate async retryFailed(clusters: Cluster[]): Promise<void> {\n\t\tconst failed: Cluster[] = [];\n\n\t\tfor (const cluster of clusters) {\n\t\t\ttry {\n\t\t\t\tthis._debug(`Respawning Cluster ${cluster.id}`);\n\t\t\t\tawait cluster.respawn();\n\t\t\t} catch {\n\t\t\t\tthis._debug(`Cluster ${cluster.id} failed, requeuing...`);\n\t\t\t\tfailed.push(cluster);\n\t\t\t}\n\t\t}\n\n\t\tif (failed.length) {\n\t\t\tthis._debug(`${failed.length} Clusters still failed, retry...`);\n\t\t\treturn this.retryFailed(failed);\n\t\t}\n\t}\n\n\tprivate async _fetchSessionEndpoint(): Promise<SessionObject> {\n\t\tif (!this.token) throw new Error('No token was provided!');\n\t\tconst res = await fetch(`${http.api}/v${http.version}/gateway/bot`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: { authorization: `Bot ${this.token.replace(/^Bot\\s*/i, '')}` }\n\t\t});\n\t\tif (res.ok) return res.json() as unknown as SessionObject;\n\t\tthrow new Error(`Invalid Session Endpoint response: ${res.status} ${res.statusText}`);\n\t}\n\n\tprivate _debug(message: string) {\n\t\tthis.emit(SharderEvents.DEBUG, message);\n\t}\n}\n"],"sourceRoot":"../../src"}
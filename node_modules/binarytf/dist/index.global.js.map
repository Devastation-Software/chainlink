{"version":3,"sources":["../src/index.ts","../src/lib/errors/DeserializerError.ts","../src/lib/util/constants.ts","../src/lib/util/util.ts","../src/lib/Deserializer.ts","../src/lib/errors/SerializerError.ts","../src/lib/Serializer.ts"],"sourcesContent":["import { Deserializer } from './lib/Deserializer';\nimport { OnUnsupported, Serializer } from './lib/Serializer';\nexport * from './lib/Deserializer';\nexport * from './lib/errors/DeserializerError';\nexport * from './lib/errors/SerializerError';\nexport * from './lib/Serializer';\nexport * from './lib/util/constants';\nexport * from './lib/util/util';\n\nexport function serialize<T = unknown>(data: T, onUnsupported?: OnUnsupported) {\n\treturn new Serializer(data, onUnsupported).process();\n}\n\nexport function deserialize<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tdeserializer.clean();\n\treturn value;\n}\n\nexport function deserializeWithMetadata<T = unknown>(buffer: Uint8Array, offset = -1) {\n\tconst deserializer = new Deserializer(buffer);\n\tif (offset !== -1) deserializer.offset = offset;\n\tconst value = deserializer.read() as T;\n\tconst bufferOffset = deserializer.offset;\n\tdeserializer.clean();\n\n\treturn {\n\t\tvalue,\n\t\toffset: bufferOffset === buffer.byteLength ? -1 : bufferOffset\n\t};\n}\n","export class DeserializerError extends Error {\n\tpublic kind: DeserializerReason;\n\n\tpublic constructor(message: string, kind: DeserializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum DeserializerReason {\n\tUnknownType = 'UnknownType',\n\tUnexpectedEndOfBuffer = 'UnexpectedEndOfBuffer'\n}\n","export enum BinaryTokens {\n\tNullPointer,\n\tHole,\n\tNull,\n\tPBigInt,\n\tNBigInt,\n\tBoolean,\n\tString,\n\tUndefined,\n\tUnsignedByte,\n\tSignedByte,\n\tUnsignedInt32,\n\tSignedInt32,\n\tUnsignedFloat64,\n\tSignedFloat64,\n\tArray,\n\tEmptyArray,\n\tObjectReference,\n\tDate,\n\tBooleanObject,\n\tNumberObject,\n\tStringObject,\n\tEmptyObject,\n\tObject,\n\tRegExp,\n\tMap,\n\tEmptyMap,\n\tWeakMap,\n\tSet,\n\tEmptySet,\n\tWeakSet,\n\tArrayBuffer,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tInt16Array,\n\tUint16Array,\n\tInt32Array,\n\tUint32Array,\n\tFloat32Array,\n\tFloat64Array,\n\tDataView\n}\n\nexport enum BinaryPrimitives {\n\tBigInt = 'bigint',\n\tBoolean = 'boolean',\n\tNumber = 'number',\n\tObject = 'object',\n\tString = 'string',\n\tUndefined = 'undefined'\n}\n\nexport type TypedArray = Uint8Array | Float32Array | Int32Array;\nexport const TypedArray = Object.getPrototypeOf(Int8Array) as TypedArray;\n","import { BinaryTokens, TypedArray } from './constants';\n\nexport namespace RegExps {\n\tconst g = 1 << 0;\n\tconst i = 1 << 1;\n\tconst m = 1 << 2;\n\tconst y = 1 << 3;\n\tconst u = 1 << 4;\n\tconst s = 1 << 5;\n\n\texport function flagsAsInteger(regExp: RegExp) {\n\t\treturn (\n\t\t\t(regExp.global ? g : 0) |\n\t\t\t(regExp.ignoreCase ? i : 0) |\n\t\t\t(regExp.multiline ? m : 0) |\n\t\t\t(regExp.sticky ? y : 0) |\n\t\t\t(regExp.unicode ? u : 0) |\n\t\t\t(regExp.dotAll ? s : 0)\n\t\t);\n\t}\n\n\texport function flagsFromInteger(integer: number) {\n\t\tlet ret = '';\n\t\tif (integer & g) ret += 'g';\n\t\tif (integer & i) ret += 'i';\n\t\tif (integer & m) ret += 'm';\n\t\tif (integer & y) ret += 'y';\n\t\tif (integer & u) ret += 'u';\n\t\tif (integer & s) ret += 's';\n\t\treturn ret;\n\t}\n}\n\nexport namespace BigIntegers {\n\texport const SUPPORTED = typeof BigInt === 'function';\n\texport const ZERO = SUPPORTED ? BigInt(0) : null;\n\texport const ONE = SUPPORTED ? BigInt(1) : null;\n\texport const EIGHT = SUPPORTED ? BigInt(8) : null;\n\texport const BYTE = SUPPORTED ? BigInt(0xff) : null;\n}\n\nexport namespace Numbers {\n\texport function nextPowerOfTwo(n: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log2(n)));\n\t}\n}\n\nexport namespace TypedArrays {\n\texport const constructors = [\n\t\tInt8Array,\n\t\tUint8Array,\n\t\tUint8ClampedArray,\n\t\tInt16Array,\n\t\tUint16Array,\n\t\tInt32Array,\n\t\tUint32Array,\n\t\tFloat32Array,\n\t\tFloat64Array,\n\t\tDataView\n\t] as { new <T extends TypedArray>(...args: any): T }[];\n\n\tif (typeof BigInt64Array === 'function') constructors.push(BigInt64Array);\n\tif (typeof BigUint64Array === 'function') constructors.push(BigUint64Array);\n\n\texport const typedArrayTags = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t[Object.prototype.toString.call(new typedArray(new ArrayBuffer(0))), BinaryTokens[typedArray.name]] as [string, BinaryTokens]\n\t\t)\n\t);\n\n\texport const typedArrayTagToConstructor = new Map(\n\t\tconstructors.map(\n\t\t\t(typedArray) =>\n\t\t\t\t// @ts-ignore 7015\n\t\t\t\t[BinaryTokens[typedArray.name], typedArray] as unknown as [BinaryTokens, { new <T extends TypedArray>(...args: any): T }]\n\t\t)\n\t);\n}\n","// eslint-disable-next-line spaced-comment\n/// <reference lib=\"dom\" />\n\nimport { DeserializerError, DeserializerReason } from './errors/DeserializerError';\nimport { BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, RegExps, TypedArrays } from './util/util';\n\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport class Deserializer {\n\tpublic offset = 0;\n\tprivate _buffer: Uint8Array | null;\n\tprivate _objectIDs = new Map() as Map<number, Record<any, any>>;\n\n\tpublic constructor(buffer: Uint8Array) {\n\t\tthis._buffer = buffer;\n\t}\n\n\tprivate get finished() {\n\t\treturn this.offset === this._buffer!.length;\n\t}\n\n\tpublic clean() {\n\t\tthis._buffer = null;\n\t\tthis.offset = 0;\n\t\tthis._objectIDs.clear();\n\t}\n\n\tpublic read() {\n\t\tconst type = this.read8();\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.Null:\n\t\t\t\treturn null;\n\t\t\tcase BinaryTokens.PBigInt:\n\t\t\t\treturn this.readValueBigInt(false);\n\t\t\tcase BinaryTokens.NBigInt:\n\t\t\t\treturn this.readValueBigInt(true);\n\t\t\tcase BinaryTokens.Boolean:\n\t\t\t\treturn Boolean(this.read8());\n\t\t\tcase BinaryTokens.String:\n\t\t\t\treturn this.readString();\n\t\t\tcase BinaryTokens.Undefined:\n\t\t\t\treturn undefined;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\treturn this.read8();\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\treturn -this.read8();\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\treturn this.read32();\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\treturn -this.read32();\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\treturn this.readF64();\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\treturn -this.readF64();\n\t\t\tcase BinaryTokens.Array:\n\t\t\t\treturn this.readValueArray();\n\t\t\tcase BinaryTokens.EmptyArray:\n\t\t\t\treturn this.createObjectID([]);\n\t\t\tcase BinaryTokens.ObjectReference:\n\t\t\t\treturn this._objectIDs.get(this.read32());\n\t\t\tcase BinaryTokens.Date:\n\t\t\t\treturn this.createObjectID(new Date(this.readF64()));\n\t\t\tcase BinaryTokens.BooleanObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Boolean(this.read8()));\n\t\t\tcase BinaryTokens.NumberObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new Number(this.readF64()));\n\t\t\tcase BinaryTokens.StringObject:\n\t\t\t\t// eslint-disable-next-line no-new-wrappers\n\t\t\t\treturn this.createObjectID(new String(this.readString()));\n\t\t\tcase BinaryTokens.EmptyObject:\n\t\t\t\treturn this.createObjectID({});\n\t\t\tcase BinaryTokens.Object:\n\t\t\t\treturn this.readValueObject();\n\t\t\tcase BinaryTokens.RegExp:\n\t\t\t\treturn this.createObjectID(new RegExp(this.readString(), RegExps.flagsFromInteger(this.read8())));\n\t\t\tcase BinaryTokens.Map:\n\t\t\t\treturn this.readValueMap();\n\t\t\tcase BinaryTokens.EmptyMap:\n\t\t\t\treturn this.createObjectID(new Map());\n\t\t\tcase BinaryTokens.Set:\n\t\t\t\treturn this.readValueSet();\n\t\t\tcase BinaryTokens.EmptySet:\n\t\t\t\treturn this.createObjectID(new Set());\n\t\t\tcase BinaryTokens.ArrayBuffer:\n\t\t\t\treturn this.readValueArrayBuffer();\n\t\t\tcase BinaryTokens.WeakMap:\n\t\t\t\treturn this.createObjectID(new WeakMap());\n\t\t\tcase BinaryTokens.WeakSet:\n\t\t\t\treturn this.createObjectID(new WeakSet());\n\t\t\tcase BinaryTokens.Int8Array:\n\t\t\tcase BinaryTokens.Uint8Array:\n\t\t\tcase BinaryTokens.Uint8ClampedArray:\n\t\t\tcase BinaryTokens.Int16Array:\n\t\t\tcase BinaryTokens.Uint16Array:\n\t\t\tcase BinaryTokens.Int32Array:\n\t\t\tcase BinaryTokens.Uint32Array:\n\t\t\tcase BinaryTokens.Float32Array:\n\t\t\tcase BinaryTokens.Float64Array:\n\t\t\tcase BinaryTokens.DataView:\n\t\t\t\treturn this.readValueTypedArray(type);\n\t\t\tdefault:\n\t\t\t\tthrow new DeserializerError(`Unknown type received: ${type}`, DeserializerReason.UnknownType);\n\t\t}\n\t}\n\n\tprivate readValueTypedArray(token: BinaryTokens) {\n\t\t// Read the byte length, then create a shared ArrayBuffer for the desired\n\t\t// typedArray and an Uint8Array which we write to.\n\t\tconst byteLength = this.read32();\n\t\tthis.ensureBytes(byteLength);\n\n\t\t// eslint-disable-next-line @typescript-eslint/init-declarations\n\t\tlet value: TypedArray;\n\t\t// Fast-path if we are deserializing an Uint8Array\n\t\tif (token === BinaryTokens.Uint8Array) {\n\t\t\tvalue = this._buffer!.subarray(this.offset, this.offset + byteLength);\n\t\t} else {\n\t\t\tconst buffer = new ArrayBuffer(byteLength);\n\t\t\tconst ctor = TypedArrays.typedArrayTagToConstructor.get(token)!;\n\t\t\tvalue = new ctor(buffer);\n\t\t\tnew Uint8Array(buffer).set(this._buffer!.subarray(this.offset, this.offset + byteLength));\n\t\t}\n\t\tthis.offset += byteLength;\n\t\treturn this.createObjectID(value);\n\t}\n\n\tprivate readValueArrayBuffer() {\n\t\tconst value = this.createObjectID(new ArrayBuffer(this.read32()));\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tfor (let i = 0, max = uint8Array.length; i < max; i++) {\n\t\t\tuint8Array[i] = this.read8();\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate readValueSet() {\n\t\tconst value = this.createObjectID(new Set());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.add(this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueMap() {\n\t\tconst value = this.createObjectID(new Map());\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tvalue.set(this.read(), this.read());\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueObject() {\n\t\tconst value = this.createObjectID({}) as Record<string | number, unknown>;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tconst entryKey = this.read() as string | number;\n\t\t\tconst entryValue = this.read();\n\t\t\tvalue[entryKey] = entryValue;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprivate readValueArray() {\n\t\tconst value = this.createObjectID([] as unknown[]);\n\t\tlet i = 0;\n\t\twhile (!this.readNullTerminator()) {\n\t\t\tif (this.read8() !== BinaryTokens.Hole) {\n\t\t\t\tthis.offsetBack();\n\t\t\t\tvalue[i] = this.read();\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\n\t\t// This is required for holey arrays\n\t\tvalue.length = i;\n\n\t\treturn value;\n\t}\n\n\tprivate readString() {\n\t\tconst end = this._buffer!.indexOf(BinaryTokens.NullPointer, this.offset);\n\t\tif (end === -1) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\tconst sub = this._buffer!.subarray(this.offset, end);\n\t\tconst str = Deserializer._textDecoder.decode(sub);\n\t\tthis.offset = end + 1;\n\t\treturn str;\n\t}\n\n\tprivate readValueBigInt(sign: boolean) {\n\t\tconst byteLength = this.read32();\n\n\t\tlet value = BigIntegers.ZERO!;\n\t\tlet b = BigIntegers.ONE!;\n\n\t\tfor (let i = 0; i < byteLength; i++) {\n\t\t\tconst digit = this.read8();\n\t\t\tvalue += BigInt(digit) * b;\n\t\t\tb <<= BigIntegers.EIGHT!;\n\t\t}\n\n\t\treturn sign ? -value : value;\n\t}\n\n\tprivate readNullTerminator() {\n\t\tif (this.watch8() === BinaryTokens.NullPointer) {\n\t\t\t++this.offset;\n\t\t\treturn true;\n\t\t} else if (this.finished) {\n\t\t\tthrow new DeserializerError('Found End-Of-Buffer, expecting a `NullTerminator` before.', DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate createObjectID<T>(value: T) {\n\t\tthis._objectIDs.set(this._objectIDs.size, value);\n\t\treturn value;\n\t}\n\n\tprivate offsetBack() {\n\t\t--this.offset;\n\t}\n\n\tprivate watch8() {\n\t\treturn this._buffer![this.offset];\n\t}\n\n\tprivate read8() {\n\t\tthis.ensureBytes(1);\n\t\treturn this._buffer![this.offset++];\n\t}\n\n\tprivate read32() {\n\t\tthis.ensureBytes(4);\n\t\treturn (\n\t\t\tthis._buffer![this.offset++] * 2 ** 24 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 16 +\n\t\t\tthis._buffer![this.offset++] * 2 ** 8 +\n\t\t\tthis._buffer![this.offset++]\n\t\t);\n\t}\n\n\tprivate readF64() {\n\t\tthis.ensureBytes(8);\n\t\tuInt8Float64Array[0] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[1] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[2] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[3] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[4] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[5] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[6] = this._buffer![this.offset++];\n\t\tuInt8Float64Array[7] = this._buffer![this.offset++];\n\t\treturn float64Array[0];\n\t}\n\n\tprivate ensureBytes(amount: number) {\n\t\tif (this.offset + amount > this._buffer!.length) {\n\t\t\tthrow new DeserializerError(`Found End-Of-Buffer, expecting ${amount} byte(s).`, DeserializerReason.UnexpectedEndOfBuffer);\n\t\t}\n\t}\n\n\tprivate static _textDecoder = new TextDecoder();\n}\n","export class SerializerError extends Error {\n\tpublic kind: SerializerReason;\n\n\tpublic constructor(message: string, kind: SerializerReason) {\n\t\tsuper(message);\n\t\tthis.kind = kind;\n\t}\n}\n\nexport enum SerializerReason {\n\tUnsupportedType = 'UnsupportedType',\n\tUnsupportedSerializedType = 'UnsupportedSerializedType',\n\tUnexpectedNullValue = 'UnexpectedNullValue'\n}\n","// eslint-disable-next-line spaced-comment\n/// <reference lib=\"dom\" />\n\nimport { SerializerError, SerializerReason } from './errors/SerializerError';\nimport { BinaryPrimitives, BinaryTokens, TypedArray } from './util/constants';\nimport { BigIntegers, Numbers, RegExps, TypedArrays } from './util/util';\n\n// Immutable\nconst MIN_INT8 = -0b0111_1111;\nconst MAX_INT8 = 0b1111_1111;\nconst MIN_INT32 = -0b0111_1111_1111_1111_1111_1111_1111_1111;\nconst MAX_INT32 = 0b1111_1111_1111_1111_1111_1111_1111_1111;\n\n// Mutable\nconst float64Array = new Float64Array(1);\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\n\nexport interface OnUnsupported {\n\t(value: unknown): unknown;\n}\n\nexport class Serializer {\n\tpublic onUnsupported: OnUnsupported | null;\n\tprivate _buffer: Uint8Array | null = new Uint8Array(16);\n\tprivate _offset = 0;\n\tprivate _objectIDs = new Map() as Map<Record<any, any>, number>;\n\tprivate _data: any;\n\tprivate _handlingUnsupported = false;\n\n\tpublic constructor(data: any, onUnsupported: OnUnsupported | null = null) {\n\t\tthis._data = data;\n\t\tthis.onUnsupported = onUnsupported;\n\t}\n\n\tpublic process() {\n\t\tthis.parse(this._data);\n\t\tconst temp = this._buffer!.subarray(0, this._offset);\n\n\t\tthis._data = null;\n\t\tthis._offset = 0;\n\t\tthis._objectIDs.clear();\n\t\tthis._buffer = null;\n\t\treturn temp;\n\t}\n\n\tpublic parse(value: any, hint = typeof value) {\n\t\tswitch (hint) {\n\t\t\tcase BinaryPrimitives.BigInt:\n\t\t\t\treturn this.parseBigInt(value);\n\t\t\tcase BinaryPrimitives.Boolean:\n\t\t\t\treturn this.parseBoolean(value);\n\t\t\tcase BinaryPrimitives.Number:\n\t\t\t\treturn this.parseNumber(value);\n\t\t\tcase BinaryPrimitives.Object:\n\t\t\t\treturn this.parseObject(value);\n\t\t\tcase BinaryPrimitives.String:\n\t\t\t\treturn this.parseString(value);\n\t\t\tcase BinaryPrimitives.Undefined:\n\t\t\t\treturn this.parseUndefined();\n\t\t\tdefault:\n\t\t\t\treturn this.handleUnsupported(value, hint);\n\t\t}\n\t}\n\n\tprotected handleUnsupported(value: unknown, hint: string) {\n\t\t// If there's an onUnsupported handler, try to call it\n\t\tif (this.onUnsupported) {\n\t\t\t// If the serializer was handling an unsupported type, abort the serialization\n\t\t\t// as it's most likely an error in the return type of the handler.\n\t\t\tif (this._handlingUnsupported) {\n\t\t\t\tthrow new SerializerError('The modified value was not serializable.', SerializerReason.UnsupportedSerializedType);\n\t\t\t}\n\n\t\t\t// Set the serializer to handling unsupported, parse, and once it's done\n\t\t\t// serializing the output of unSupported, set it back to false.\n\t\t\tthis._handlingUnsupported = true;\n\t\t\tthis.parse(this.onUnsupported(value));\n\t\t\tthis._handlingUnsupported = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// If no handler is available, throw TypeError\n\t\tthrow new SerializerError(`Unsupported type '${hint}'.`, SerializerReason.UnsupportedType);\n\t}\n\n\tprivate parseBigInt(value: bigint) {\n\t\tconst sign = value >= BigIntegers.ZERO! ? 0 : 1;\n\t\tthis.ensureAlloc(5);\n\t\tthis.write8(sign ? BinaryTokens.NBigInt : BinaryTokens.PBigInt);\n\n\t\tconst headerOffset = this._offset;\n\t\tthis._offset += 4;\n\n\t\tlet unsignedBigInt = sign === 1 ? -value : value;\n\t\tlet byteCount = 0;\n\t\twhile (unsignedBigInt > 0) {\n\t\t\t++byteCount;\n\t\t\tthis.write8(Number(unsignedBigInt & BigIntegers.BYTE!));\n\t\t\tunsignedBigInt >>= BigIntegers.EIGHT!;\n\t\t}\n\n\t\tthis.write32At(byteCount, headerOffset);\n\t}\n\n\tprivate parseBoolean(value: boolean) {\n\t\tthis.write8(BinaryTokens.Boolean);\n\t\tthis.write8(value ? 1 : 0);\n\t}\n\n\tprivate parseNumber(value: number) {\n\t\tconst type = this.getNumberType(value);\n\t\tthis.write8(type);\n\t\tswitch (type) {\n\t\t\tcase BinaryTokens.SignedByte:\n\t\t\t\tthis.write8(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedByte:\n\t\t\t\tthis.write8(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedInt32:\n\t\t\t\tthis.write32(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedInt32:\n\t\t\t\tthis.write32(value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.SignedFloat64:\n\t\t\t\tthis.writeF64(-value);\n\t\t\t\tbreak;\n\t\t\tcase BinaryTokens.UnsignedFloat64:\n\t\t\t\tthis.writeF64(value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unreachable code. Got unexpected integer type ${type}`);\n\t\t}\n\t}\n\n\tprivate parseObject(value: object) {\n\t\tif (value === null) return this.parseValueNull();\n\n\t\t// Circular reference detection\n\t\tconst id = this._objectIDs.get(value);\n\t\tif (typeof id === 'number') return this.parseValueReference(id);\n\n\t\t// Set this object to the reference list\n\t\tthis._objectIDs.set(value, this._objectIDs.size);\n\n\t\t// If it's an array, parse it\n\t\tif (Array.isArray(value)) return this.parseValueArray(value);\n\n\t\t// We're doing this because it's safer for the context where you\n\t\t// extend the classes.\n\t\tconst tag = Object.prototype.toString.call(value);\n\t\tswitch (tag) {\n\t\t\tcase '[object String]':\n\t\t\t\treturn this.parseValueObjectString(value as unknown as string);\n\t\t\tcase '[object Boolean]':\n\t\t\t\treturn this.parseValueObjectBoolean(value as unknown as boolean);\n\t\t\tcase '[object Number]':\n\t\t\t\treturn this.parseValueObjectNumber(value as unknown as number);\n\t\t\tcase '[object Date]':\n\t\t\t\treturn this.parseValueObjectDate(value as Date);\n\t\t\tcase '[object RegExp]':\n\t\t\t\treturn this.parseValueObjectRegExp(value as RegExp);\n\t\t\tcase '[object Object]':\n\t\t\t\treturn this.parseValueObjectLiteral(value);\n\t\t\tcase '[object Map]':\n\t\t\t\treturn this.parseValueObjectMap(value as Map<unknown, unknown>);\n\t\t\tcase '[object Set]':\n\t\t\t\treturn this.parseValueObjectSet(value as Set<unknown>);\n\t\t\tcase '[object ArrayBuffer]':\n\t\t\t\treturn this.parseValueObjectArrayBuffer(value as ArrayBuffer);\n\t\t\tcase '[object WeakMap]':\n\t\t\t\treturn this.parseValueObjectWeakMap();\n\t\t\tcase '[object WeakSet]':\n\t\t\t\treturn this.parseValueObjectWeakSet();\n\t\t\tcase '[object Promise]':\n\t\t\t\treturn this.handleUnsupported(value, 'object');\n\t\t\tdefault:\n\t\t\t\treturn this.parseValueObjectFallback(value, tag);\n\t\t}\n\t}\n\n\tprivate parseString(value: string) {\n\t\tthis.write8(BinaryTokens.String);\n\t\tthis.writeValueString(value);\n\t}\n\n\tprivate parseUndefined() {\n\t\tthis.write8(BinaryTokens.Undefined);\n\t}\n\n\tprivate parseValueNull() {\n\t\tthis.write8(BinaryTokens.Null);\n\t}\n\n\tprivate parseValueObjectString(value: String) {\n\t\tthis.write8(BinaryTokens.StringObject);\n\t\tthis.writeValueString(value.valueOf());\n\t}\n\n\tprivate parseValueObjectBoolean(value: Boolean) {\n\t\tthis.write8(BinaryTokens.BooleanObject);\n\t\tthis.write8(value.valueOf() ? 1 : 0);\n\t}\n\n\tprivate parseValueObjectNumber(value: Number) {\n\t\tthis.write8(BinaryTokens.NumberObject);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectDate(value: Date) {\n\t\tthis.write8(BinaryTokens.Date);\n\t\tthis.writeF64(value.valueOf());\n\t}\n\n\tprivate parseValueObjectRegExp(value: RegExp) {\n\t\tthis.write8(BinaryTokens.RegExp);\n\t\tthis.writeValueString(value.source);\n\t\tthis.write8(RegExps.flagsAsInteger(value));\n\t}\n\n\tprivate parseValueObjectLiteral(value: Record<any, any>) {\n\t\tconst keys = Object.keys(value);\n\t\tif (keys.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyObject);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Object);\n\t\tfor (const entryKey of keys) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(value[entryKey]);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectMap(value: Map<unknown, unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyMap);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Map);\n\t\tfor (const [entryKey, entryValue] of value.entries()) {\n\t\t\tthis.parse(entryKey);\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectSet(value: Set<unknown>) {\n\t\tif (value.size === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptySet);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.Set);\n\t\tfor (const entryValue of value) {\n\t\t\tthis.parse(entryValue);\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate parseValueObjectArrayBuffer(value: ArrayBuffer) {\n\t\tthis.write8(BinaryTokens.ArrayBuffer);\n\n\t\tconst uint8Array = new Uint8Array(value);\n\t\tthis.write32(uint8Array.length);\n\t\tthis.write(uint8Array);\n\t}\n\n\tprivate parseValueObjectWeakMap() {\n\t\tthis.write8(BinaryTokens.WeakMap);\n\t}\n\n\tprivate parseValueObjectWeakSet() {\n\t\tthis.write8(BinaryTokens.WeakSet);\n\t}\n\n\tprivate parseValueObjectFallback(value: object, tag: string) {\n\t\tconst typedArrayTag = TypedArrays.typedArrayTags.get(tag);\n\t\tif (typedArrayTag) this.writeValueTypedArray(value as TypedArray, typedArrayTag);\n\t\telse this.parseValueObjectLiteral(value);\n\t}\n\n\tprivate parseValueReference(value: number) {\n\t\tthis.write8(BinaryTokens.ObjectReference);\n\t\tthis.write32(value);\n\t}\n\n\tprivate parseValueArray(value: Array<unknown>) {\n\t\tif (value.length === 0) {\n\t\t\treturn this.write8(BinaryTokens.EmptyArray);\n\t\t}\n\n\t\tthis.ensureAlloc(2);\n\t\tthis.write8(BinaryTokens.Array);\n\n\t\tfor (let i = 0, n = value.length; i < n; i++) {\n\t\t\tif (i in value) {\n\t\t\t\tthis.parse(value[i]);\n\t\t\t} else {\n\t\t\t\tthis.write8(BinaryTokens.Hole);\n\t\t\t}\n\t\t}\n\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate writeValueTypedArray(value: TypedArray, tag: BinaryTokens) {\n\t\tthis.write8(tag);\n\t\tthis.write32(value.byteLength);\n\n\t\tif (tag !== BinaryTokens.Uint8Array) {\n\t\t\tvalue = new Uint8Array(value.buffer);\n\t\t}\n\n\t\tthis.write(value as Uint8Array);\n\t}\n\n\tprivate write(value: Uint8Array) {\n\t\tthis.ensureAlloc(value.byteLength);\n\t\tthis._buffer!.set(value, this._offset);\n\t\tthis._offset += value.byteLength;\n\t}\n\n\tprivate write8(value: number) {\n\t\tthis.ensureAlloc(1);\n\t\tthis._buffer![this._offset++] = value;\n\t}\n\n\tprivate write32(value: number) {\n\t\tthis.ensureAlloc(4);\n\t\tthis.write32At(value, this._offset);\n\t\tthis._offset += 4;\n\t}\n\n\tprivate write32At(value: number, offset: number) {\n\t\tthis._buffer![offset + 3] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 2] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset + 1] = value;\n\t\tvalue >>>= 8;\n\t\tthis._buffer![offset] = value;\n\t}\n\n\tprivate writeF64(value: number) {\n\t\tfloat64Array[0] = value;\n\t\tthis.write(uInt8Float64Array);\n\t}\n\n\tprivate writeValueString(value: string) {\n\t\tconst serialized = Serializer._textEncoder.encode(value);\n\n\t\t// Strings must not contain a null pointer, since they are null-delimited.\n\t\tif (serialized.includes(BinaryTokens.NullPointer)) {\n\t\t\tthrow new SerializerError('Unexpected null pointer in serialized string.', SerializerReason.UnexpectedNullValue);\n\t\t}\n\n\t\tthis.write(serialized);\n\t\tthis.write8(BinaryTokens.NullPointer);\n\t}\n\n\tprivate getNumberType(value: number) {\n\t\tconst sign = value < 0;\n\t\tif (value % 1 === 0) {\n\t\t\t// Byte (S | U)\n\t\t\tif (value >= MIN_INT8 && value <= MAX_INT8) return sign ? BinaryTokens.SignedByte : BinaryTokens.UnsignedByte;\n\t\t\t// Int32 (S | U)\n\t\t\tif (value >= MIN_INT32 && value <= MAX_INT32) return sign ? BinaryTokens.SignedInt32 : BinaryTokens.UnsignedInt32;\n\t\t\t// Fallback to float\n\t\t}\n\t\t// Float64\n\t\treturn sign ? BinaryTokens.SignedFloat64 : BinaryTokens.UnsignedFloat64;\n\t}\n\n\tprivate ensureAlloc(amount: number) {\n\t\tthis.expandBuffer(this._offset + amount);\n\t}\n\n\tprivate expandBuffer(length: number) {\n\t\tif (this._buffer!.length < length) {\n\t\t\tconst old = this._buffer;\n\t\t\tthis._buffer = new Uint8Array(Numbers.nextPowerOfTwo(length));\n\t\t\tthis._buffer.set(old!);\n\t\t}\n\t}\n\n\tprivate static _textEncoder = new TextEncoder();\n}\n"],"mappings":"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","names":[]}